**Starter Prompt for Glaze Day Scheduler (CLI) Project**

---

I'm working on a quirky side project called **Glaze Day Scheduler (CLI)**. The idea is to help me schedule a weekly "glazing" (shout-out/celebration) for each friend in my group, making sure:
- Each friend is assigned a unique week before anyone repeats.
- No one is glazed too close to their birthday (configurable buffer, e.g., 1 week before/after).
- The schedule maximizes the distance between a friend's birthday and their glaze date.
- If a friend leaves or joins the group, the schedule can be patched: past assignments are preserved, and only future assignments are re-optimized.
- The tool includes fairness metrics to evaluate the distribution of glaze dates relative to birthdays.

**Project Structure:**
- `main.py`: CLI interface and core scheduling logic
- `friends.py`: Friend data management
- `scheduler.py`: Scheduling algorithms
- `storage.py`: Schedule persistence
- `metrics.py`: Fairness calculations and reporting
- `utils.py`: Helper functions
- `data/`: Input data directory
- `output/`: Generated schedules and metrics
- `docs/`: Project documentation

**Tech stack:**
- Python 3
- CSV for friend list input (`name,birthday`)
- JSON for saving/loading the schedule and metrics
- Command-line interface
- Uses a greedy algorithm to maximize birthday distance for each assignment

**Example CSV:**
```
name,birthday,nickname
Alice,04-20,A-Rod
Bob,07-15,
Charlie,12-01,Charles
```

**Key Features:**
- Generate new schedules with configurable parameters
- Patch existing schedules when friends leave or join
- Configurable birthday buffer and interval between glazes
- Fairness metrics including:
  - Average distance from birthday
  - Minimum/maximum distances
  - Standard deviation of distances
  - Per-friend statistics
- JSON export of schedules and metrics
- Multiple scheduling cycles support

**When responding, please keep in mind:**
- I want to minimize disruption to already-assigned glaze dates when patching the schedule.
- I prefer simple, readable Python code.
- Suggestions for new features or improvements are welcome!

---

**Please use this context for all follow-up questions, code, or design help related to this project.**

---
